/////////////////// Plan de recuperación de desastres ///////////////////

DRP (Disaster Recovery Plan) -> Es un conjunto de políticas y procedimientos para recuperar la infraestructura tecnológica y los sistemas vitales después de un desastre natural o provocado por el hombre. Se enfoca en cómo minimizar el tiempo de inactividad y la pérdida de datos.

Hay dos puntos importantes a tener en consideración cuando ocurre un desastre:
RTO (Recovery Time Objective) -> Tiempo máximo tolerable que puede tardar en recuperarse un sistema después de un desastre. (Cuanto tiempo puede estar caído un sistema?)
RPO (Recovery Point Objective) -> Punto máximo en el tiempo al que se puede recuperar un sistema después de un desastre. Mide la cantidad máxima de datos que la empresa está dispuesta a perder. (Cuanto tiempo de datos se puede perder?)
Las estrategias de backup deben responder a estas necesidades, y pueden ser diferentes para cada base de datos.

Hay varios tipos de backup que se pueden utilizar para cumplir con los objetivos de RTO y RPO:
- Full backup           -> Copia completa de la base de datos en un punto en el tiempo.
```sql
BACKUP DATABASE [NombreBaseDatos] 
TO DISK = 'C:\Ruta\Completa\NombreBackup.bak' 
WITH COMPRESSION, STATS = 10;
```
- Backup de los logs de las transacciones -> Copia de los registros de transacciones desde el último backup *de logs*. Permite la recuperación a un punto específico en el tiempo (Point-in-Time Recovery). Solo disponible en modelos de recuperación FULL o BULK_LOGGED.
```sql
BACKUP LOG [NombreBaseDatos] 
TO DISK = 'C:\Ruta\Completa\NombreBackupLog.trn' 
WITH COMPRESSION, STATS = 10;
```
- Backup diferencial    -> Copia de los datos que han cambiado desde el último backup completo.
```sql
BACKUP DATABASE [NombreBaseDatos] 
TO DISK = 'C:\Ruta\Completa\NombreBackupDiff.dif' 
WITH DIFFERENTIAL, COMPRESSION, STATS = 10;
```
- Filegroups backup     -> Copia de uno o más archivos o filegroups de la base de datos. Útil para bases de datos muy grandes, permitiendo respaldar y restaurar partes de la BD de forma independiente.
```sql 
BACKUP DATABASE [NombreBaseDatos] FILEGROUP = 'NombreFileGroup' 
TO DISK = 'Ruta\NombreBackupFileGroup.bak' 
WITH COMPRESSION, STATS = 10;
```
- Tail-log backup       -> Es un backup del log de transacciones que captura los registros que aún no han sido respaldados. Se realiza justo antes de restaurar una base de datos o cuando está dañada, para evitar la pérdida de trabajo reciente.
```sql
BACKUP LOG [NombreBaseDatos] 
TO DISK = 'Ruta\NombreBackupTailLog.trn' 
WITH NORECOVERY;
```

NOTA: Al realizar respaldos de una base de datos, es recomendado guardarlos en diferentes discos, para evitar que si el disco falla, perder toda la información.

Opciones comunes en los comandos de backup:
-- Opciones de gestión de archivos de backup
INIT -> Sobrescribe el archivo de backup si existe, creando un nuevo conjunto de medios. Si no se especifica, el nuevo backup se anexa al archivo (comportamiento por defecto: NOINIT).
NOINIT -> (Predeterminado) Anexa el backup al archivo existente, conservando los backups anteriores en el mismo archivo.

-- Opciones de rendimiento y estado
COMPRESSION -> Realiza el backup comprimiendo los datos, lo que ahorra espacio en disco. Muy recomendado.
STATS = [porcentaje] -> Muestra un mensaje de progreso cada vez que se completa el porcentaje especificado. Por ejemplo, `STATS = 10` muestra el progreso cada 10%.

-- Opciones para backups de log
NORECOVERY -> Se usa principalmente para el 'tail-log backup'. Respalda el final del log y deja la base de datos en estado de restauración (RESTORING), de modo que no se puedan realizar más transacciones antes de la restauración principal.

-- Opciones heredadas (generalmente no necesarias para backups en disco)
-- SKIP -> Omite la verificación de la etiqueta del medio. Usado en backups a cinta.
-- NOREWIND -> No rebobina el medio después del backup. Usado en backups a cinta.
-- NOUNLOAD -> No descarga el medio después del backup. Usado en backups a cinta.

Para crear un respaldo de una base de datos en SSMS sin T-SQL (Transact SQL):
Te diriges al 'Explorador de objetos > Bases de datos > tu_base_de_datos (clic derecho) > Tareas > Copia de seguridad'. Esto abrirá una ventana de configuración del Backup de la base de datos, donde se te permitirá configurar cosas como:
- A que base de datos queremos generarle una copia de seguridad
- El tipo de backup que queremos generar
- Si queremos hacer un Backup de la base de datos o de un grupo de archivos (filegroup)
- La ruta donde queremos guardar la copia (si es en la nube, podemos agregar el URL) (Se pueden agregar varias rutas para crear varias copias)
En la parte izquierda de la ventana, también hay otras opciones como:
- Si quieres sobrescribir todos los conjuntos de copia de seguridad existentes
- Si quieres que se compruebe la copia de seguridad
- Si quieres que tenga fecha de caducidad
- etc.

Estas estrategias deben tomarse en cuenta en el momento que se crea la base de datos, para estar prevenidos en caso de que llegara a ocurrir algún desastre.
Pueden usarse las herramientas propias de SQL Server para el manejo de la recuperación de datos, pero también pueden usarse servicios de terceros.

/////////////////// Proceso de restauración ///////////////////

Se compone de 3 fases
- Realizar la copia de los datos (ya sea completa, diferencial, de logs, etc.)
- Recuperar detalles del registro de transacciones 
- Los datos se ponen al día hasta un punto de recuperación

La restauración de una base de datos implica varios pasos y consideraciones, dependiendo del tipo de backup que se haya realizado y del estado actual de la base de datos.
Hay algunas características que están presentes dependiendo de la versión de SQL Server que se este utilizando (express, developer, enterprise).

SQL Server permite:
- Recuperar grupos de archivos
- Restauración de paginas
- Restauración en línea (Solo en la versión enterprise)

Para realizar la restauración se debe verificar las copias de seguridad a nuestra disposición y validar el estado de las mismas.

Los tipos de restauraciones que permite SQL Server son:
- Restaurar una base de datos
- Remplazar una base de datos existente
- Restaurar archivos de una base de datos existente a una ubicación diferente
- Restaurar una base de datos en modo de espera
- Restauración de una copia de seguridad diferencial
- Restauración de una copia de seguridad del registro de transacciones 

Para verificar si el archivo de respaldo para la recuperación de la base de datos es valido, podemos hacerlo con esta consulta T-SQL:
```sql
RESTORE VERIFYONLY FROM DISK = N'C:\Ruta\Completa\nombre_del_respaldo.bak';
```
Una vez que se verifica el estado de la copia, se procede a realizar la restauración:
```sql
RESTORE DATABASE [nombre_de_la_db] 
FROM DISK = N'C:\Ruta\Completa\nombre_del_respaldo.bak'
WITH RECOVERY; -- O NORECOVERY si se aplicarán más logs
```
Una vez restaurada, se debe verificar la integridad lógica y física de la base de datos:
```sql
DBCC CHECKDB('nombre_de_la_db');
```

Para realizar la restauración de la base de datos usando SSMS, creamos primero una base de datos, luego nos dirigimos a: 'Explorador de objetos > Bases de datos > nombre_de_la_db (clic derecho) > Tareas > Restaurar > Base de datos...'.
Esto abrirá una ventana donde podremos configurar la restauración, como que base de datos queremos restaurar, e incluso Comprobar el estado de la copia de seguridad. También hay otras configuraciones, como si se quiere sobrescribir la base de datos.

/////////////////// Transparent Data Encryption ///////////////////

Cifra los archivos de datos y de log de SQL Server para proteger los datos en reposo (at-rest). Así, en caso de que se llegaran a robar los archivos físicos, no los podrían leer al estar encriptados.
(Esta función esta disponible en las versiones Enterprise 2008 en adelante y Standard 2017 en adelante)

Es necesario para cumplir con el reglamento general de protección de datos (RGPD / GDPR).

Para la implementación es necesario crear una clave maestra en la base de datos `master` y luego un certificado protegido por esa clave.

Primero, creamos nuestra clave maestra:
```sql
-- Ejecutar en la base de datos master
USE master;
GO
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'UnaContraseñaMuySeguraYCompleja';
GO
```
Después, debes crear el certificado firmado:
```sql
CREATE CERTIFICATE TDE_Certificado
WITH SUBJECT = 'Certificado para TDE';
GO
```
 Luego, se debe crear un respaldo de ese certificado:
```sql
BACKUP CERTIFICATE TDE_Certificado
TO FILE = 'C:\Ruta\Backups\TDE_Certificado.cer'
WITH PRIVATE KEY (
    FILE = 'C:\Ruta\Backups\TDE_Certificado.pvk',
    ENCRYPTION BY PASSWORD = 'OtraContraseñaParaProtegerLaClavePrivada'
);
GO
```
Luego, se crea la llave de encriptación para la base de datos (DEK):
```sql
-- Cambiar al contexto de la base de datos a cifrar
USE MiBaseDeDatos;
GO
CREATE DATABASE ENCRYPTION KEY
WITH ALGORITHM = AES_256
ENCRYPTION BY SERVER CERTIFICATE TDE_Certificado;
GO
```
Por ultimo, se cifra la base de datos:
```sql
ALTER DATABASE MiBaseDeDatos SET ENCRYPTION ON;
GO
```

Para saber si la base de datos esta encriptada, se obtienen las llaves de encriptación
```sql
SELECT db_name(database_id) AS DatabaseName, encryption_state
FROM sys.dm_database_encryption_keys;
```
Dependiendo el código de encryption_state, es si esta cifrada o no la base de datos
0 -> No existe una clave de cifrado en la base de datos, no esta cifrado
1 -> No cifrado
2 -> Se esta cifrando la base de datos
3 -> Cifrado
4 -> Se esta cambiando la clave de cifrado
5 -> Se esta descifrando
6 -> Se esta cambiando la protección
	
/////////////////// Dynamic Data Masking ///////////////////

Protege datos confidenciales alterando dinámicamente los datos devueltos a los usuarios o aplicaciones durante una consulta, sin cambiar los datos subyacentes almacenados en la base de datos.

Para hacer esto, debemos agregar 'MASKED WITH (FUNCTION = )' para marcar estos datos como "bloqueados", para que cuando alguien sin privilegios para ver esta información, solo pueda verla parcialmente o no la pueda ver.
La manera en la que se ocultara la información, dependerá en la función que se escoja.

Ejemplo para enmascarar una columna de email:
```sql
ALTER TABLE dbo.MiTabla
ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');
```

Para eliminar la mascara de una columna, se realiza la siguiente operacion:
```sql
ALTER TABLE dbo.MiTabla
ALTER COLUMN Email DROP MASKED;
```
